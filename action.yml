name: 'Mirror private repo changes in the dual public repo'
description: 'Used to duplicate a single repo between an internal (private)
              instance and a public facing instance.'
inputs:
  source_file:
    description: 'Working "source_file"'
    required: false
  destination_repo:
    description: 'Working "destination_repo"'
    required: false
  destination_branch:
    description: 'Working "destination_branch"'
    required: false
  destination_folder:
    description: 'Working "destination_folder"'
    required: false
  user_email:
    description: 'Working "user_email"'
    required: false
  user_name:
    description: 'Working "user_name"'
    required: false
  commit_message:
    description: 'Working "commit_message"'
    required: false
  ##################################################### My args | Incorporated
  my_github_secret_pat:
    description: 'The GitHub Personal Access Token (PAT) with necessary
                  permissions to publish a commit in the public repository'
    required: true
  my_private_subdir:
    description: 'The directory (relative to "GITHUB_WORKSPACE") where the
                  private repo lives within the GH Actions runner.

                  Default: "." (i.e., the GITHUB_WORKSPACE directory)'
    required: false
    default: '.'
  ##################################################### My args | To incorporate
  my_user_name:
    description: 'GitHub username for the commit.

                  Default: <github.actor>'
    required: false
    default: '${{ github.actor }}'
  my_user_email:
    description: 'Email for the git commit.

                  Default: <github.actor>@users.noreply.github.com'
    required: false
    default: '${{ github.actor }}@users.noreply.github.com'
  my_public_gitignore_filename_convention:
    description: 'The conventioned used to name your files that store the list
                  of files that should be in the .gitignore of the public repo,
                  but which you want to track in your private repo. (i.e., they
                  themselves are not .gitignore files, but will be aggregated to
                  create one only for the public commits).

                  Default: "public.gitignore"'
    required: false
    default: 'public.gitignore'
  my_public_repo:
    description: 'The full name of the repo that is used as the public facing
                  instance of the pair.

                  Default: The name of the private repo, with a presumed
                           "_private" truncated from the end.'
    required: false
  my_working_branch_name:
    description: 'The name of the target branch in the public repo.

                  TODO: Resolve following possabilities
                    - Target branch does NOT exist
                    - Target branch DOES exist
                    -- Target branch is a simple BRANCH
                    --- Target PR IS owned by source PR author
                    --- Target PR is NOT owned by source PR author
                    -- Target branch is a PULL REQUEST
                    --- Target branch IS owned by source PR author
                    --- Target branch is NOT owned by source PR author

                  Default: <github.head_ref>'
    required: false
    default: ${{ github.head_ref }}
  my_commit_message:
    description: 'A custom message for the commit.

                  Default: <github.event.head_commit.message>'
    required: false
    default: ${{ github.event.head_commit.message }}
  my_git_server:
    description: 'Git server host.

                  Default: github.com'
    required: false
    default: 'github.com'
runs:
  using: 'docker'
  image: 'Dockerfile'
  args:
    - ${{ inputs.source-file }}
    - ${{ inputs.destination-repo }}
    - ${{ inputs.destination-branch }}
    - ${{ inputs.destination-folder }}
    - ${{ inputs.user-email }}
    - ${{ inputs.user-name }}
    - ${{ inputs.commit-message }}
    # My args:
    - ${{ inputs.my-github-secret-pat }}
    - ${{ inputs.my-user-name }}
    - ${{ inputs.my-user-email }}
    - ${{ inputs.my-public-gitignore-filename-convention }}
    - ${{ inputs.my-private-dir }}
    - ${{ inputs.my-public-dir }}
    - ${{ inputs.my-working-branch-name }}
    - ${{ inputs.my-commit-message }}
    - ${{ inputs.my-git-server }}
branding:
  icon: 'git-commit'
  color: 'green'
